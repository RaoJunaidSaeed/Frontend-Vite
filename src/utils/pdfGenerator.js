import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

export const generatePDF = (payments, user, filter = 'monthly') => {
  const doc = new jsPDF('p', 'mm', 'a4');
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  // --- HEADER WITH LOGO & TITLE ---
  const addHeader = () => {
    // If you have a logo, add it here (PNG/JPG from public folder)
    // doc.addImage("/logo.png", "PNG", 14, 8, 20, 20);

    doc.setFontSize(18);
    doc.setTextColor(34, 197, 94); // green
    doc.text('Rentofix Payment Statement', pageWidth / 2, 20, { align: 'center' });

    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text('Confidential Document - Generated by Rentofix Platform', pageWidth / 2, 27, {
      align: 'center',
    });
    doc.line(14, 32, pageWidth - 14, 32); // horizontal line
  };

  // --- FOOTER WITH PAGE NUMBER ---
  const addFooter = (pageNumber, totalPages) => {
    doc.setFontSize(9);
    doc.setTextColor(150);
    doc.text(`Page ${pageNumber} of ${totalPages}`, pageWidth / 2, pageHeight - 10, {
      align: 'center',
    });
    doc.text(
      'This is a system-generated statement and does not require signature.',
      pageWidth / 2,
      pageHeight - 5,
      { align: 'center' }
    );
  };

  // --- TENANT INFO BOX ---
  const addTenantInfo = () => {
    doc.setFillColor(240, 240, 240);
    doc.rect(14, 38, pageWidth - 28, 30, 'F');

    doc.setFontSize(12);
    doc.setTextColor(0);

    doc.text(`Name: ${user?.firstName} ${user?.lastName}`, 20, 48);
    doc.text(`Email: ${user?.email}`, 20, 56);
    doc.text(`Phone: ${user?.phoneNumber || 'N/A'}`, 20, 64);

    doc.text(`Generated On: ${new Date().toLocaleDateString()}`, pageWidth - 80, 48);
    doc.text(`Account ID: ${user?._id?.slice(-6) || 'XXXXXX'}`, pageWidth - 80, 56);
  };

  // --- GROUPING FUNCTION ---
  const groupKey = (date) => {
    const d = new Date(date);
    if (filter === 'weekly') {
      const week = Math.ceil(d.getDate() / 7);
      return `${d.toLocaleString('default', { month: 'long' })} - Week ${week}`;
    }
    return `${d.toLocaleString('default', { month: 'long' })} ${d.getFullYear()}`;
  };

  // --- MAIN CONTENT ---
  const grouped = {};
  payments.forEach((p) => {
    const key = groupKey(p.paymentDate);
    if (!grouped[key]) grouped[key] = [];
    grouped[key].push(p);
  });

  let pageNumber = 1;
  const groupKeys = Object.keys(grouped);

  groupKeys.forEach((period, idx) => {
    if (idx > 0) {
      doc.addPage();
      pageNumber++;
    }

    addHeader();
    addTenantInfo();

    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94);
    doc.text(`${filter === 'weekly' ? 'Weekly' : 'Monthly'} Report: ${period}`, 14, 80);

    const records = grouped[period];

    // Table
    const tableData = records.map((p, i) => [
      i + 1,
      p.propertyId?.title || 'N/A',
      `${p.propertyId?.address}, ${p.propertyId?.region}, ${p.propertyId?.city}` || 'N/A',
      new Date(p.paymentDate).toLocaleDateString(),
      new Date(p.dueDate).toLocaleDateString(),
      `${p.currency} ${p.amount.toLocaleString()}`,
      p.status.toUpperCase(),
      p.verificationDate ? new Date(p.verificationDate).toLocaleDateString() : 'Unverified',
    ]);

    autoTable(doc, {
      startY: 88,
      head: [
        ['#', 'Property', 'Address', 'Payment Date', 'Due Date', 'Amount', 'Status', 'Verified'],
      ],
      body: tableData,
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 3 },
      headStyles: { fillColor: [34, 197, 94], textColor: 255 },
    });

    // Summary Box
    const total = records.reduce((sum, r) => sum + r.amount, 0);
    const completed = records.filter((r) => r.status === 'completed').length;
    const pending = records.filter((r) => r.status === 'pending').length;

    let finalY = doc.lastAutoTable.finalY + 10;
    doc.setFillColor(245, 245, 245);
    doc.rect(14, finalY, pageWidth - 28, 30, 'F');
    doc.setTextColor(0);
    doc.setFontSize(11);

    doc.text(`Summary for ${period}`, 20, finalY + 8);
    doc.text(`Total Payments: ${records.length}`, 20, finalY + 16);
    doc.text(`Completed: ${completed}`, 20, finalY + 24);
    doc.text(`Pending: ${pending}`, 100, finalY + 16);
    doc.text(
      `Total Amount: ${records[0]?.currency || 'PKR'} ${total.toLocaleString()}`,
      100,
      finalY + 24
    );

    // Footer
    addFooter(pageNumber, groupKeys.length);
  });

  //   // --- OPTIONAL: WATERMARK ---
  //   doc.setFontSize(80);
  //   doc.setTextColor(150, 150, 150);
  //   doc.text('Rentofix', pageWidth / 2, pageHeight / 2, {
  //     align: 'center',
  //     angle: 45,
  //   });

  // doc.save(`${user?.firstName || 'Tenant'}_PaymentHistory.pdf`);
  doc.save(`PaymentHistory.pdf`);
};
