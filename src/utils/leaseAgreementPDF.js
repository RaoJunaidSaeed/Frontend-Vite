// utils/leaseAgreementPDF.js
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

export const generateLeaseAgreementPDF = (booking, user) => {
  const doc = new jsPDF('p', 'mm', 'a4');
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  // ===================== HEADER =====================
  doc.setFillColor(40, 40, 40); // dark header
  doc.rect(0, 0, pageWidth, 35, 'F');

  doc.setTextColor(255, 215, 0);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(22);
  doc.text('LEASE AGREEMENT', pageWidth / 2, 20, { align: 'center' });

  doc.setFontSize(11);
  doc.setTextColor(200);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by Rentofix Platform', pageWidth / 2, 30, { align: 'center' });

  // ===================== WATERMARK =====================
  doc.setFontSize(60);
  doc.setTextColor(240, 240, 240);
  doc.setFont('helvetica', 'bold');
  doc.text('Rentofix', pageWidth / 2, pageHeight / 2, {
    align: 'center',
    angle: 30,
  });

  // Reset
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);

  // ===================== AGREEMENT INTRO =====================
  const effectiveDate = new Date().toLocaleDateString();
  doc.setFont('helvetica', 'normal');
  doc.text(`This Lease Agreement is entered into on ${effectiveDate} between:`, 20, 55);

  // ===================== TENANT & OWNER INFO (Table) =====================
  autoTable(doc, {
    startY: 65,
    head: [['Party', 'Details']],
    body: [
      [
        'Tenant',
        `${user.firstName} ${user.lastName} | ${user.email}${
          user.phoneNumber ? ' | ' + user.phoneNumber : ''
        }`,
      ],
      [
        'Owner',
        `${booking.ownerId.firstName} ${booking.ownerId.lastName} | ${booking.ownerId.email} | ${booking.ownerId.phoneNumber}`,
      ],
    ],
    theme: 'grid',
    styles: { fontSize: 11, cellPadding: 4 },
    headStyles: {
      fillColor: [51, 51, 51],
      textColor: [255, 215, 0],
      halign: 'left', // ✅ left aligned headers
    },
    alternateRowStyles: { fillColor: [245, 245, 245] },
  });

  // ===================== PROPERTY INFO (Table) =====================
  const property = booking.propertyId;
  autoTable(doc, {
    startY: doc.lastAutoTable.finalY + 10,
    head: [['Property', 'Details']],
    body: [
      ['Title', booking.propertyId?.title || 'Untitled Property'],
      // ['Status', booking.status], // ❌ removed as requested
      ['Move-in Date', new Date(booking.desiredMoveInDate).toLocaleDateString()],
      ['Lease Duration', booking.desiredLeaseDuration],
      ['Address', `${property?.address}, ${property?.region}, ${property?.city}` || 'N/A'],
    ],
    theme: 'grid',
    styles: { fontSize: 11, cellPadding: 4 },
    headStyles: {
      fillColor: [51, 51, 51],
      textColor: [255, 215, 0],
      halign: 'left', // ✅ left aligned headers
    },
    alternateRowStyles: { fillColor: [245, 245, 245] },
  });

  // ===================== LEASE TERMS =====================
  let y = doc.lastAutoTable.finalY + 15;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(13);
  doc.setTextColor(51, 51, 51);
  doc.text('Lease Terms:', 20, y);

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);

  // helper to add months/years to a date
  const addDuration = (startDate, duration) => {
    const endDate = new Date(startDate);

    if (duration.toLowerCase().includes('month')) {
      const months = parseInt(duration);
      endDate.setMonth(endDate.getMonth() + months);
    } else if (duration.toLowerCase().includes('year')) {
      const years = parseInt(duration);
      endDate.setFullYear(endDate.getFullYear() + years);
    }

    return endDate;
  };

  const startDate = new Date(booking.desiredMoveInDate);
  const endDate = addDuration(startDate, booking.desiredLeaseDuration);

  const terms = [
    `1. Lease starts on ${startDate.toLocaleDateString()} and ends on ${endDate.toLocaleDateString()} (Duration: ${
      booking.desiredLeaseDuration
    }).`,
    '2. Tenant agrees to pay rent before the due date each month.',
    '3. Owner agrees to maintain the property in livable condition.',
    '4. Both parties agree to comply with local housing regulations.',
    '5. Agreement is valid for the stated lease duration.',
  ];

  terms.forEach((line, i) => {
    doc.text(line, 25, y + 10 + i * 8, { maxWidth: pageWidth - 40 });
  });

  // Example rent breakdown
  const rentY = y + 10 + terms.length * 8 + 5;
  doc.text(`• Monthly Rent: ${property?.rentAmount}`, 30, rentY);
  // doc.text('• Security Deposit: $XXXX', 30, rentY + 8);

  // ===================== SIGNATURE SECTION (Dynamic Position) =====================
  const sigY = rentY + 25; // ✅ below rules, no overlap
  doc.setDrawColor(0);
  doc.setLineWidth(0.3);

  // Tenant signature line
  doc.line(30, sigY, 90, sigY);
  doc.text(`${user.firstName} ${user.lastName}`, 30, sigY - 3);
  doc.text('Tenant Signature', 30, sigY + 7);

  // Owner signature line
  doc.line(pageWidth - 90, sigY, pageWidth - 30, sigY);
  doc.text(`${booking.ownerId.firstName} ${booking.ownerId.lastName}`, pageWidth - 90, sigY - 3);
  doc.text('Owner Signature', pageWidth - 90, sigY + 7);

  // ===================== FOOTER =====================
  doc.setFontSize(9);
  doc.setTextColor(120);
  doc.text(
    'This document is electronically generated and valid without a physical signature.',
    pageWidth / 2,
    pageHeight - 10,
    { align: 'center' }
  );

  // Save PDF
  doc.save(`Lease_Agreement_${booking.propertyId?.title || 'Property'}.pdf`);
};
